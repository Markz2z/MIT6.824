!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddServer	src/labrpc/labrpc.go	/^func (rn *Network) AddServer(servername interface{}, rs *Server) {$/;"	f
AddService	src/labrpc/labrpc.go	/^func (rs *Server) AddService(svc *Service) {$/;"	f
All	src/kvraft/config.go	/^func (cfg *config) All() []int {$/;"	f
All	src/shardmaster/config.go	/^func (cfg *config) All() []int {$/;"	f
Append	src/diskv/client.go	/^func (ck *Clerk) Append(key string, value string) {$/;"	f
Append	src/kvpaxos/client.go	/^func (ck *Clerk) Append(key string, value string) {$/;"	f
Append	src/kvraft/client.go	/^func (ck *Clerk) Append(key string, value string) {$/;"	f
Append	src/paxos-shardkv/client.go	/^func (ck *Clerk) Append(key string, value string) {$/;"	f
Append	src/pbservice/client.go	/^func (ck *Clerk) Append(key string, value string) {$/;"	f
Append	src/shardkv/client.go	/^func (ck *Clerk) Append(key string, value string) {$/;"	f
AppendEntries	src/raft/raft.go	/^func (rf *Raft) AppendEntries(args AppendEntriesArgs, reply *AppendEntriesReply) {$/;"	f
AppendEntriesArgs	src/raft/raft.go	/^type AppendEntriesArgs struct {$/;"	t
AppendEntriesReply	src/raft/raft.go	/^type AppendEntriesReply struct {$/;"	t
ApplyMsg	raft.go	/^type ApplyMsg struct {$/;"	t
ApplyMsg	src/raft/raft.go	/^type ApplyMsg struct {$/;"	t
Call	src/labrpc/labrpc.go	/^func (e *ClientEnd) Call(svcMeth string, args interface{}, reply interface{}) bool {$/;"	f
Candidate	raft.go	/^	Follower 		= "follower"$/;"	c
CleanupFiles	src/mapreduce/master_splitmerge.go	/^func (mr *Master) CleanupFiles() {$/;"	f
Clerk	src/diskv/client.go	/^type Clerk struct {$/;"	t
Clerk	src/kvpaxos/client.go	/^type Clerk struct {$/;"	t
Clerk	src/kvraft/client.go	/^type Clerk struct {$/;"	t
Clerk	src/lockservice/client.go	/^type Clerk struct {$/;"	t
Clerk	src/paxos-shardkv/client.go	/^type Clerk struct {$/;"	t
Clerk	src/paxos-shardmaster/client.go	/^type Clerk struct {$/;"	t
Clerk	src/pbservice/client.go	/^type Clerk struct {$/;"	t
Clerk	src/shardkv/client.go	/^type Clerk struct {$/;"	t
Clerk	src/shardmaster/client.go	/^type Clerk struct {$/;"	t
Clerk	src/viewservice/client.go	/^type Clerk struct {$/;"	t
ClientEnd	src/labrpc/labrpc.go	/^type ClientEnd struct {$/;"	t
Close	src/lockservice/server.go	/^func (dc DeafConn) Close() error {$/;"	f
Config	src/paxos-shardmaster/common.go	/^type Config struct {$/;"	t
Config	src/shardmaster/common.go	/^type Config struct {$/;"	t
Connect	src/labrpc/labrpc.go	/^func (rn *Network) Connect(endname interface{}, servername interface{}) {$/;"	f
ConnectAll	src/kvraft/config.go	/^func (cfg *config) ConnectAll() {$/;"	f
ConnectAll	src/shardmaster/config.go	/^func (cfg *config) ConnectAll() {$/;"	f
ConnectClient	src/kvraft/config.go	/^func (cfg *config) ConnectClient(ck *Clerk, to []int) {$/;"	f
ConnectClient	src/shardmaster/config.go	/^func (cfg *config) ConnectClient(ck *Clerk, to []int) {$/;"	f
ConnectClientUnlocked	src/kvraft/config.go	/^func (cfg *config) ConnectClientUnlocked(ck *Clerk, to []int) {$/;"	f
ConnectClientUnlocked	src/shardmaster/config.go	/^func (cfg *config) ConnectClientUnlocked(ck *Clerk, to []int) {$/;"	f
Copy	src/raft/persister.go	/^func (ps *Persister) Copy() *Persister {$/;"	f
DPrintf	src/diskv/server.go	/^func DPrintf(format string, a ...interface{}) (n int, err error) {$/;"	f
DPrintf	src/kvpaxos/server.go	/^func DPrintf(format string, a ...interface{}) (n int, err error) {$/;"	f
DPrintf	src/kvraft/server.go	/^func DPrintf(format string, a ...interface{}) (n int, err error) {$/;"	f
DPrintf	src/paxos-shardkv/server.go	/^func DPrintf(format string, a ...interface{}) (n int, err error) {$/;"	f
DPrintf	src/raft/util.go	/^func DPrintf(format string, a ...interface{}) (n int, err error) {$/;"	f
DeadPings	src/viewservice/common.go	/^const DeadPings = 5$/;"	c
DeafConn	src/lockservice/server.go	/^type DeafConn struct {$/;"	t
Debug	src/diskv/server.go	/^const Debug = 0$/;"	c
Debug	src/kvpaxos/server.go	/^const Debug = 0$/;"	c
Debug	src/kvraft/server.go	/^const Debug = 0$/;"	c
Debug	src/paxos-shardkv/server.go	/^const Debug = 0$/;"	c
Debug	src/raft/util.go	/^const Debug = 0$/;"	c
Decided	src/paxos/paxos.go	/^const ($/;"	c
DeleteServer	src/labrpc/labrpc.go	/^func (rn *Network) DeleteServer(servername interface{}) {$/;"	f
DisKV	src/diskv/server.go	/^type DisKV struct {$/;"	t
DisconnectClient	src/kvraft/config.go	/^func (cfg *config) DisconnectClient(ck *Clerk, from []int) {$/;"	f
DisconnectClient	src/shardmaster/config.go	/^func (cfg *config) DisconnectClient(ck *Clerk, from []int) {$/;"	f
DisconnectClientUnlocked	src/kvraft/config.go	/^func (cfg *config) DisconnectClientUnlocked(ck *Clerk, from []int) {$/;"	f
DisconnectClientUnlocked	src/shardmaster/config.go	/^func (cfg *config) DisconnectClientUnlocked(ck *Clerk, from []int) {$/;"	f
Distributed	src/mapreduce/master.go	/^func Distributed(jobName string, files []string, nreduce int, master string) (mr *Master) {$/;"	f
DoTask	src/mapreduce/worker.go	/^func (wk *Worker) DoTask(arg *DoTaskArgs, _ *struct{}) error {$/;"	f
DoTaskArgs	src/mapreduce/common_rpc.go	/^type DoTaskArgs struct {$/;"	t
Done	src/paxos/paxos.go	/^func (px *Paxos) Done(seq int) {$/;"	f
Enable	src/labrpc/labrpc.go	/^func (rn *Network) Enable(endname interface{}, enabled bool) {$/;"	f
Err	src/diskv/common.go	/^type Err string$/;"	t
Err	src/kvpaxos/common.go	/^type Err string$/;"	t
Err	src/kvraft/common.go	/^type Err string$/;"	t
Err	src/paxos-shardkv/common.go	/^type Err string$/;"	t
Err	src/pbservice/common.go	/^type Err string$/;"	t
Err	src/shardkv/common.go	/^type Err string$/;"	t
Err	src/shardmaster/common.go	/^type Err string$/;"	t
ErrNoKey	src/diskv/common.go	/^	OK            = "OK"$/;"	c
ErrNoKey	src/kvpaxos/common.go	/^	OK       = "OK"$/;"	c
ErrNoKey	src/kvraft/common.go	/^	OK       = "OK"$/;"	c
ErrNoKey	src/paxos-shardkv/common.go	/^	OK            = "OK"$/;"	c
ErrNoKey	src/pbservice/common.go	/^	OK             = "OK"$/;"	c
ErrNoKey	src/shardkv/common.go	/^	OK            = "OK"$/;"	c
ErrWrongGroup	src/diskv/common.go	/^	ErrNoKey      = "ErrNoKey"$/;"	c
ErrWrongGroup	src/paxos-shardkv/common.go	/^	ErrNoKey      = "ErrNoKey"$/;"	c
ErrWrongGroup	src/shardkv/common.go	/^	ErrNoKey      = "ErrNoKey"$/;"	c
ErrWrongServer	src/pbservice/common.go	/^	ErrNoKey       = "ErrNoKey"$/;"	c
Fate	src/paxos/paxos.go	/^type Fate int$/;"	t
Follower	raft.go	/^	Initialized 	= "initialized"$/;"	c
Forgotten	src/paxos/paxos.go	/^	Pending        \/\/ not yet decided.$/;"	c
GenericTest	src/kvraft/test_test.go	/^func GenericTest(t *testing.T, tag string, nclients int, unreliable bool, crash bool, partitions bool, maxraftstate int) {$/;"	f
Get	src/diskv/client.go	/^func (ck *Clerk) Get(key string) string {$/;"	f
Get	src/diskv/server.go	/^func (kv *DisKV) Get(args *GetArgs, reply *GetReply) error {$/;"	f
Get	src/kvpaxos/client.go	/^func (ck *Clerk) Get(key string) string {$/;"	f
Get	src/kvpaxos/server.go	/^func (kv *KVPaxos) Get(args *GetArgs, reply *GetReply) error {$/;"	f
Get	src/kvraft/client.go	/^func (ck *Clerk) Get(key string) string {$/;"	f
Get	src/kvraft/server.go	/^func (kv *RaftKV) Get(args *GetArgs, reply *GetReply) {$/;"	f
Get	src/paxos-shardkv/client.go	/^func (ck *Clerk) Get(key string) string {$/;"	f
Get	src/paxos-shardkv/server.go	/^func (kv *ShardKV) Get(args *GetArgs, reply *GetReply) error {$/;"	f
Get	src/pbservice/client.go	/^func (ck *Clerk) Get(key string) string {$/;"	f
Get	src/pbservice/server.go	/^func (pb *PBServer) Get(args *GetArgs, reply *GetReply) error {$/;"	f
Get	src/shardkv/client.go	/^func (ck *Clerk) Get(key string) string {$/;"	f
Get	src/shardkv/server.go	/^func (kv *ShardKV) Get(args *GetArgs, reply *GetReply) {$/;"	f
Get	src/viewservice/client.go	/^func (ck *Clerk) Get() (View, bool) {$/;"	f
Get	src/viewservice/server.go	/^func (vs *ViewServer) Get(args *GetArgs, reply *GetReply) error {$/;"	f
GetArgs	src/diskv/common.go	/^type GetArgs struct {$/;"	t
GetArgs	src/kvpaxos/common.go	/^type GetArgs struct {$/;"	t
GetArgs	src/kvraft/common.go	/^type GetArgs struct {$/;"	t
GetArgs	src/paxos-shardkv/common.go	/^type GetArgs struct {$/;"	t
GetArgs	src/pbservice/common.go	/^type GetArgs struct {$/;"	t
GetArgs	src/shardkv/common.go	/^type GetArgs struct {$/;"	t
GetArgs	src/viewservice/common.go	/^type GetArgs struct {$/;"	t
GetCount	src/labrpc/labrpc.go	/^func (rn *Network) GetCount(servername interface{}) int {$/;"	f
GetCount	src/labrpc/labrpc.go	/^func (rs *Server) GetCount() int {$/;"	f
GetRPCCount	src/viewservice/server.go	/^func (vs *ViewServer) GetRPCCount() int32 {$/;"	f
GetReply	src/diskv/common.go	/^type GetReply struct {$/;"	t
GetReply	src/kvpaxos/common.go	/^type GetReply struct {$/;"	t
GetReply	src/kvraft/common.go	/^type GetReply struct {$/;"	t
GetReply	src/paxos-shardkv/common.go	/^type GetReply struct {$/;"	t
GetReply	src/pbservice/common.go	/^type GetReply struct {$/;"	t
GetReply	src/shardkv/common.go	/^type GetReply struct {$/;"	t
GetReply	src/viewservice/common.go	/^type GetReply struct {$/;"	t
GetState	raft.go	/^func (rf *Raft) GetState() (int, bool) {$/;"	f
GetState	src/raft/raft.go	/^func (rf *Raft) GetState() (int, bool) {$/;"	f
Handler1	src/labrpc/test_test.go	/^func (js *JunkServer) Handler1(args string, reply *int) {$/;"	f
Handler2	src/labrpc/test_test.go	/^func (js *JunkServer) Handler2(args int, reply *string) {$/;"	f
Handler3	src/labrpc/test_test.go	/^func (js *JunkServer) Handler3(args int, reply *int) {$/;"	f
Handler4	src/labrpc/test_test.go	/^func (js *JunkServer) Handler4(args *JunkArgs, reply *JunkReply) {$/;"	f
Handler5	src/labrpc/test_test.go	/^func (js *JunkServer) Handler5(args JunkArgs, reply *JunkReply) {$/;"	f
Initialized	raft.go	/^	Stopped			= "stopped"$/;"	c
IsServerDead	src/labrpc/labrpc.go	/^func (rn *Network) IsServerDead(endname interface{}, servername interface{}, server *Server) bool {$/;"	f
Join	src/paxos-shardmaster/client.go	/^func (ck *Clerk) Join(gid int64, servers []string) {$/;"	f
Join	src/paxos-shardmaster/server.go	/^func (sm *ShardMaster) Join(args *JoinArgs, reply *JoinReply) error {$/;"	f
Join	src/shardmaster/client.go	/^func (ck *Clerk) Join(servers map[int][]string) {$/;"	f
Join	src/shardmaster/server.go	/^func (sm *ShardMaster) Join(args *JoinArgs, reply *JoinReply) {$/;"	f
JoinArgs	src/paxos-shardmaster/common.go	/^type JoinArgs struct {$/;"	t
JoinArgs	src/shardmaster/common.go	/^type JoinArgs struct {$/;"	t
JoinReply	src/paxos-shardmaster/common.go	/^type JoinReply struct {$/;"	t
JoinReply	src/shardmaster/common.go	/^type JoinReply struct {$/;"	t
JunkArgs	src/labrpc/test_test.go	/^type JunkArgs struct {$/;"	t
JunkReply	src/labrpc/test_test.go	/^type JunkReply struct {$/;"	t
JunkServer	src/labrpc/test_test.go	/^type JunkServer struct {$/;"	t
KVPaxos	src/kvpaxos/server.go	/^type KVPaxos struct {$/;"	t
KeyValue	src/mapreduce/common.go	/^type KeyValue struct {$/;"	t
Kill	raft.go	/^func (rf *Raft) Kill() {$/;"	f
Kill	src/kvraft/server.go	/^func (kv *RaftKV) Kill() {$/;"	f
Kill	src/paxos-shardmaster/server.go	/^func (sm *ShardMaster) Kill() {$/;"	f
Kill	src/paxos/paxos.go	/^func (px *Paxos) Kill() {$/;"	f
Kill	src/raft/raft.go	/^func (rf *Raft) Kill() {$/;"	f
Kill	src/shardkv/server.go	/^func (kv *ShardKV) Kill() {$/;"	f
Kill	src/shardmaster/server.go	/^func (sm *ShardMaster) Kill() {$/;"	f
Kill	src/viewservice/server.go	/^func (vs *ViewServer) Kill() {$/;"	f
LABS	Makefile	/^LABS=" lab1 lab2 lab3a lab3b lab4a lab4b lab5 "$/;"	m
Leader	raft.go	/^	Candidate 		= "candidate"$/;"	c
Leader	src/kvraft/config.go	/^func (cfg *config) Leader() (bool, int) {$/;"	f
Leader	src/shardmaster/config.go	/^func (cfg *config) Leader() (bool, int) {$/;"	f
Leave	src/paxos-shardmaster/client.go	/^func (ck *Clerk) Leave(gid int64) {$/;"	f
Leave	src/paxos-shardmaster/server.go	/^func (sm *ShardMaster) Leave(args *LeaveArgs, reply *LeaveReply) error {$/;"	f
Leave	src/shardmaster/client.go	/^func (ck *Clerk) Leave(gids []int) {$/;"	f
Leave	src/shardmaster/server.go	/^func (sm *ShardMaster) Leave(args *LeaveArgs, reply *LeaveReply) {$/;"	f
LeaveArgs	src/paxos-shardmaster/common.go	/^type LeaveArgs struct {$/;"	t
LeaveArgs	src/shardmaster/common.go	/^type LeaveArgs struct {$/;"	t
LeaveReply	src/paxos-shardmaster/common.go	/^type LeaveReply struct {$/;"	t
LeaveReply	src/shardmaster/common.go	/^type LeaveReply struct {$/;"	t
Lock	src/lockservice/client.go	/^func (ck *Clerk) Lock(lockname string) bool {$/;"	f
Lock	src/lockservice/server.go	/^func (ls *LockServer) Lock(args *LockArgs, reply *LockReply) error {$/;"	f
LockArgs	src/lockservice/common.go	/^type LockArgs struct {$/;"	t
LockReply	src/lockservice/common.go	/^type LockReply struct {$/;"	t
LockServer	src/lockservice/server.go	/^type LockServer struct {$/;"	t
LogSize	src/kvraft/config.go	/^func (cfg *config) LogSize() int {$/;"	f
LogSize	src/shardmaster/config.go	/^func (cfg *config) LogSize() int {$/;"	f
LongDelays	src/labrpc/labrpc.go	/^func (rn *Network) LongDelays(yes bool) {$/;"	f
LongReordering	src/labrpc/labrpc.go	/^func (rn *Network) LongReordering(yes bool) {$/;"	f
Make	src/paxos/paxos.go	/^func Make(peers []string, me int, rpcs *rpc.Server) *Paxos {$/;"	f
MakeClerk	src/diskv/client.go	/^func MakeClerk(shardmasters []string) *Clerk {$/;"	f
MakeClerk	src/kvpaxos/client.go	/^func MakeClerk(servers []string) *Clerk {$/;"	f
MakeClerk	src/kvraft/client.go	/^func MakeClerk(servers []*labrpc.ClientEnd) *Clerk {$/;"	f
MakeClerk	src/lockservice/client.go	/^func MakeClerk(primary string, backup string) *Clerk {$/;"	f
MakeClerk	src/paxos-shardkv/client.go	/^func MakeClerk(shardmasters []string) *Clerk {$/;"	f
MakeClerk	src/paxos-shardmaster/client.go	/^func MakeClerk(servers []string) *Clerk {$/;"	f
MakeClerk	src/pbservice/client.go	/^func MakeClerk(vshost string, me string) *Clerk {$/;"	f
MakeClerk	src/shardkv/client.go	/^func MakeClerk(masters []*labrpc.ClientEnd, make_end func(string) *labrpc.ClientEnd) *Clerk {$/;"	f
MakeClerk	src/shardmaster/client.go	/^func MakeClerk(servers []*labrpc.ClientEnd) *Clerk {$/;"	f
MakeClerk	src/viewservice/client.go	/^func MakeClerk(me string, server string) *Clerk {$/;"	f
MakeEnd	src/labrpc/labrpc.go	/^func (rn *Network) MakeEnd(endname interface{}) *ClientEnd {$/;"	f
MakeNetwork	src/labrpc/labrpc.go	/^func MakeNetwork() *Network {$/;"	f
MakePersister	src/raft/persister.go	/^func MakePersister() *Persister {$/;"	f
MakeServer	src/labrpc/labrpc.go	/^func MakeServer() *Server {$/;"	f
MakeService	src/labrpc/labrpc.go	/^func MakeService(rcvr interface{}) *Service {$/;"	f
MapFunc	src/mapreduce/test_test.go	/^func MapFunc(file string, value string) (res []KeyValue) {$/;"	f
Master	src/mapreduce/master.go	/^type Master struct {$/;"	t
Max	src/paxos/paxos.go	/^func (px *Paxos) Max() int {$/;"	f
Min	src/paxos/paxos.go	/^func (px *Paxos) Min() int {$/;"	f
Move	src/paxos-shardmaster/client.go	/^func (ck *Clerk) Move(shard int, gid int64) {$/;"	f
Move	src/paxos-shardmaster/server.go	/^func (sm *ShardMaster) Move(args *MoveArgs, reply *MoveReply) error {$/;"	f
Move	src/shardmaster/client.go	/^func (ck *Clerk) Move(shard int, gid int) {$/;"	f
Move	src/shardmaster/server.go	/^func (sm *ShardMaster) Move(args *MoveArgs, reply *MoveReply) {$/;"	f
MoveArgs	src/paxos-shardmaster/common.go	/^type MoveArgs struct {$/;"	t
MoveArgs	src/shardmaster/common.go	/^type MoveArgs struct {$/;"	t
MoveReply	src/paxos-shardmaster/common.go	/^type MoveReply struct {$/;"	t
MoveReply	src/shardmaster/common.go	/^type MoveReply struct {$/;"	t
NShards	src/paxos-shardmaster/common.go	/^const NShards = 10$/;"	c
NShards	src/shardmaster/common.go	/^const NShards = 10$/;"	c
Network	src/labrpc/labrpc.go	/^type Network struct {$/;"	t
NextValue	src/kvpaxos/test_test.go	/^func NextValue(prev string, val string) string {$/;"	f
NextValue	src/kvraft/test_test.go	/^func NextValue(prev string, val string) string {$/;"	f
OK	src/diskv/common.go	/^const ($/;"	c
OK	src/kvpaxos/common.go	/^const ($/;"	c
OK	src/kvraft/common.go	/^const ($/;"	c
OK	src/paxos-shardkv/common.go	/^const ($/;"	c
OK	src/pbservice/common.go	/^const ($/;"	c
OK	src/shardkv/common.go	/^const ($/;"	c
OK	src/shardmaster/common.go	/^const ($/;"	c
Op	src/diskv/server.go	/^type Op struct {$/;"	t
Op	src/kvpaxos/server.go	/^type Op struct {$/;"	t
Op	src/kvraft/server.go	/^type Op struct {$/;"	t
Op	src/paxos-shardkv/server.go	/^type Op struct {$/;"	t
Op	src/paxos-shardmaster/server.go	/^type Op struct {$/;"	t
Op	src/shardkv/server.go	/^type Op struct {$/;"	t
Op	src/shardmaster/server.go	/^type Op struct {$/;"	t
PBServer	src/pbservice/server.go	/^type PBServer struct {$/;"	t
Paxos	src/paxos/paxos.go	/^type Paxos struct {$/;"	t
Pending	src/paxos/paxos.go	/^	Decided   Fate = iota + 1$/;"	c
Persister	src/raft/persister.go	/^type Persister struct {$/;"	t
Ping	src/viewservice/client.go	/^func (ck *Clerk) Ping(viewnum uint) (View, error) {$/;"	f
Ping	src/viewservice/server.go	/^func (vs *ViewServer) Ping(args *PingArgs, reply *PingReply) error {$/;"	f
PingArgs	src/viewservice/common.go	/^type PingArgs struct {$/;"	t
PingInterval	src/viewservice/common.go	/^const PingInterval = time.Millisecond * 100$/;"	c
PingReply	src/viewservice/common.go	/^type PingReply struct {$/;"	t
Primary	src/viewservice/client.go	/^func (ck *Clerk) Primary() string {$/;"	f
ProcessReq	src/labrpc/labrpc.go	/^func (rn *Network) ProcessReq(req reqMsg) {$/;"	f
Put	src/diskv/client.go	/^func (ck *Clerk) Put(key string, value string) {$/;"	f
Put	src/kvpaxos/client.go	/^func (ck *Clerk) Put(key string, value string) {$/;"	f
Put	src/kvraft/client.go	/^func (ck *Clerk) Put(key string, value string) {$/;"	f
Put	src/paxos-shardkv/client.go	/^func (ck *Clerk) Put(key string, value string) {$/;"	f
Put	src/pbservice/client.go	/^func (ck *Clerk) Put(key string, value string) {$/;"	f
Put	src/shardkv/client.go	/^func (ck *Clerk) Put(key string, value string) {$/;"	f
PutAppend	src/diskv/client.go	/^func (ck *Clerk) PutAppend(key string, value string, op string) {$/;"	f
PutAppend	src/diskv/server.go	/^func (kv *DisKV) PutAppend(args *PutAppendArgs, reply *PutAppendReply) error {$/;"	f
PutAppend	src/kvpaxos/client.go	/^func (ck *Clerk) PutAppend(key string, value string, op string) {$/;"	f
PutAppend	src/kvpaxos/server.go	/^func (kv *KVPaxos) PutAppend(args *PutAppendArgs, reply *PutAppendReply) error {$/;"	f
PutAppend	src/kvraft/client.go	/^func (ck *Clerk) PutAppend(key string, value string, op string) {$/;"	f
PutAppend	src/kvraft/server.go	/^func (kv *RaftKV) PutAppend(args *PutAppendArgs, reply *PutAppendReply) {$/;"	f
PutAppend	src/paxos-shardkv/client.go	/^func (ck *Clerk) PutAppend(key string, value string, op string) {$/;"	f
PutAppend	src/paxos-shardkv/server.go	/^func (kv *ShardKV) PutAppend(args *PutAppendArgs, reply *PutAppendReply) error {$/;"	f
PutAppend	src/pbservice/client.go	/^func (ck *Clerk) PutAppend(key string, value string, op string) {$/;"	f
PutAppend	src/pbservice/server.go	/^func (pb *PBServer) PutAppend(args *PutAppendArgs, reply *PutAppendReply) error {$/;"	f
PutAppend	src/shardkv/client.go	/^func (ck *Clerk) PutAppend(key string, value string, op string) {$/;"	f
PutAppend	src/shardkv/server.go	/^func (kv *ShardKV) PutAppend(args *PutAppendArgs, reply *PutAppendReply) {$/;"	f
PutAppendArgs	src/diskv/common.go	/^type PutAppendArgs struct {$/;"	t
PutAppendArgs	src/kvpaxos/common.go	/^type PutAppendArgs struct {$/;"	t
PutAppendArgs	src/kvraft/common.go	/^type PutAppendArgs struct {$/;"	t
PutAppendArgs	src/paxos-shardkv/common.go	/^type PutAppendArgs struct {$/;"	t
PutAppendArgs	src/pbservice/common.go	/^type PutAppendArgs struct {$/;"	t
PutAppendArgs	src/shardkv/common.go	/^type PutAppendArgs struct {$/;"	t
PutAppendReply	src/diskv/common.go	/^type PutAppendReply struct {$/;"	t
PutAppendReply	src/kvpaxos/common.go	/^type PutAppendReply struct {$/;"	t
PutAppendReply	src/kvraft/common.go	/^type PutAppendReply struct {$/;"	t
PutAppendReply	src/paxos-shardkv/common.go	/^type PutAppendReply struct {$/;"	t
PutAppendReply	src/pbservice/common.go	/^type PutAppendReply struct {$/;"	t
PutAppendReply	src/shardkv/common.go	/^type PutAppendReply struct {$/;"	t
Query	src/paxos-shardmaster/client.go	/^func (ck *Clerk) Query(num int) Config {$/;"	f
Query	src/paxos-shardmaster/server.go	/^func (sm *ShardMaster) Query(args *QueryArgs, reply *QueryReply) error {$/;"	f
Query	src/shardmaster/client.go	/^func (ck *Clerk) Query(num int) Config {$/;"	f
Query	src/shardmaster/server.go	/^func (sm *ShardMaster) Query(args *QueryArgs, reply *QueryReply) {$/;"	f
QueryArgs	src/paxos-shardmaster/common.go	/^type QueryArgs struct {$/;"	t
QueryArgs	src/shardmaster/common.go	/^type QueryArgs struct {$/;"	t
QueryReply	src/paxos-shardmaster/common.go	/^type QueryReply struct {$/;"	t
QueryReply	src/shardmaster/common.go	/^type QueryReply struct {$/;"	t
Raft	raft.go	/^type Raft struct {$/;"	t
Raft	src/raft/raft.go	/^type Raft struct {$/;"	t
Raft	src/shardmaster/server.go	/^func (sm *ShardMaster) Raft() *raft.Raft {$/;"	f
RaftElectionTimeout	src/raft/test_test.go	/^const RaftElectionTimeout = 1000 * time.Millisecond$/;"	c
RaftKV	src/kvraft/server.go	/^type RaftKV struct {$/;"	t
RaftStateSize	src/raft/persister.go	/^func (ps *Persister) RaftStateSize() int {$/;"	f
Read	src/lockservice/server.go	/^func (dc DeafConn) Read(p []byte) (n int, err error) {$/;"	f
ReadEndnameInfo	src/labrpc/labrpc.go	/^func (rn *Network) ReadEndnameInfo(endname interface{}) (enabled bool,$/;"	f
ReadRaftState	src/raft/persister.go	/^func (ps *Persister) ReadRaftState() []byte {$/;"	f
ReadSnapshot	src/raft/persister.go	/^func (ps *Persister) ReadSnapshot() []byte {$/;"	f
ReduceFunc	src/mapreduce/test_test.go	/^func ReduceFunc(key string, values []string) string {$/;"	f
Register	src/mapreduce/master.go	/^func (mr *Master) Register(args *RegisterArgs, _ *struct{}) error {$/;"	f
RegisterArgs	src/mapreduce/common_rpc.go	/^type RegisterArgs struct {$/;"	t
Reliable	src/labrpc/labrpc.go	/^func (rn *Network) Reliable(yes bool) {$/;"	f
RequestVote	src/raft/raft.go	/^func (rf *Raft) RequestVote(args RequestVoteArgs, reply *RequestVoteReply) {$/;"	f
RequestVoteArgs	raft.go	/^type RequestVoteArgs struct {$/;"	t
RequestVoteArgs	src/raft/raft.go	/^type RequestVoteArgs struct {$/;"	t
RequestVoteReply	raft.go	/^type RequestVoteReply struct {$/;"	t
RequestVoteReply	src/raft/raft.go	/^type RequestVoteReply struct {$/;"	t
RunWorker	src/mapreduce/worker.go	/^func RunWorker(MasterAddress string, me string,$/;"	f
SaveRaftState	src/raft/persister.go	/^func (ps *Persister) SaveRaftState(data []byte) {$/;"	f
SaveSnapshot	src/raft/persister.go	/^func (ps *Persister) SaveSnapshot(snapshot []byte) {$/;"	f
Sequential	src/mapreduce/master.go	/^func Sequential(jobName string, files []string, nreduce int,$/;"	f
Server	src/labrpc/labrpc.go	/^type Server struct {$/;"	t
Service	src/labrpc/labrpc.go	/^type Service struct {$/;"	t
Setunreliable	src/diskv/server.go	/^func (kv *DisKV) Setunreliable(what bool) {$/;"	f
Setunreliable	src/paxos-shardkv/server.go	/^func (kv *ShardKV) Setunreliable(what bool) {$/;"	f
ShardKV	src/paxos-shardkv/server.go	/^type ShardKV struct {$/;"	t
ShardKV	src/shardkv/server.go	/^type ShardKV struct {$/;"	t
ShardMaster	src/paxos-shardmaster/server.go	/^type ShardMaster struct {$/;"	t
ShardMaster	src/shardmaster/server.go	/^type ShardMaster struct {$/;"	t
Shutdown	src/mapreduce/master_rpc.go	/^func (mr *Master) Shutdown(_, _ *struct{}) error {$/;"	f
Shutdown	src/mapreduce/worker.go	/^func (wk *Worker) Shutdown(_ *struct{}, res *ShutdownReply) error {$/;"	f
ShutdownGroup	src/shardkv/config.go	/^func (cfg *config) ShutdownGroup(gi int) {$/;"	f
ShutdownReply	src/mapreduce/common_rpc.go	/^type ShutdownReply struct {$/;"	t
ShutdownServer	src/kvraft/config.go	/^func (cfg *config) ShutdownServer(i int) {$/;"	f
ShutdownServer	src/shardkv/config.go	/^func (cfg *config) ShutdownServer(gi int, i int) {$/;"	f
ShutdownServer	src/shardmaster/config.go	/^func (cfg *config) ShutdownServer(i int) {$/;"	f
SnapShotting	raft.go	/^	Leader 			= "leader"$/;"	c
Start	raft.go	/^func (rf *Raft) Start(command interface{}) (int, int, bool) {$/;"	f
Start	src/paxos/paxos.go	/^func (px *Paxos) Start(seq int, v interface{}) {$/;"	f
Start	src/raft/raft.go	/^func (rf *Raft) Start(command interface{}) (int, int, bool) {$/;"	f
StartGroup	src/shardkv/config.go	/^func (cfg *config) StartGroup(gi int) {$/;"	f
StartKVServer	src/kvraft/server.go	/^func StartKVServer(servers []*labrpc.ClientEnd, me int, persister *raft.Persister, maxraftstate int) *RaftKV {$/;"	f
StartMasterServer	src/shardkv/config.go	/^func (cfg *config) StartMasterServer(i int) {$/;"	f
StartServer	src/diskv/server.go	/^func StartServer(gid int64, shardmasters []string,$/;"	f
StartServer	src/kvpaxos/server.go	/^func StartServer(servers []string, me int) *KVPaxos {$/;"	f
StartServer	src/kvraft/config.go	/^func (cfg *config) StartServer(i int) {$/;"	f
StartServer	src/lockservice/server.go	/^func StartServer(primary string, backup string, am_primary bool) *LockServer {$/;"	f
StartServer	src/paxos-shardkv/server.go	/^func StartServer(gid int64, shardmasters []string,$/;"	f
StartServer	src/paxos-shardmaster/server.go	/^func StartServer(servers []string, me int) *ShardMaster {$/;"	f
StartServer	src/pbservice/server.go	/^func StartServer(vshost string, me string) *PBServer {$/;"	f
StartServer	src/shardkv/config.go	/^func (cfg *config) StartServer(gi int, i int) {$/;"	f
StartServer	src/shardkv/server.go	/^func StartServer(servers []*labrpc.ClientEnd, me int, persister *raft.Persister, maxraftstate int, gid int, masters []*labrpc.ClientEnd, make_end func(string) *labrpc.ClientEnd) *ShardKV {$/;"	f
StartServer	src/shardmaster/config.go	/^func (cfg *config) StartServer(i int) {$/;"	f
StartServer	src/shardmaster/server.go	/^func StartServer(servers []*labrpc.ClientEnd, me int, persister *raft.Persister) *ShardMaster {$/;"	f
StartServer	src/viewservice/server.go	/^func StartServer(me string) *ViewServer {$/;"	f
StateCandidate	src/raft/raft.go	/^	StateFollower StateType = iota$/;"	c
StateFollower	src/raft/raft.go	/^const ($/;"	c
StateLeader	src/raft/raft.go	/^	StateCandidate$/;"	c
StateType	src/raft/raft.go	/^type StateType int$/;"	t
Status	src/paxos/paxos.go	/^func (px *Paxos) Status(seq int) (Fate, interface{}) {$/;"	f
Stopped	raft.go	/^const ($/;"	c
Test1	src/viewservice/test_test.go	/^func Test1(t *testing.T) {$/;"	f
Test4Basic	src/diskv/test_test.go	/^func Test4Basic(t *testing.T) {$/;"	f
Test4Concurrent	src/diskv/test_test.go	/^func Test4Concurrent(t *testing.T) {$/;"	f
Test4ConcurrentUnreliable	src/diskv/test_test.go	/^func Test4ConcurrentUnreliable(t *testing.T) {$/;"	f
Test4Limp	src/diskv/test_test.go	/^func Test4Limp(t *testing.T) {$/;"	f
Test4Move	src/diskv/test_test.go	/^func Test4Move(t *testing.T) {$/;"	f
Test5AppendUse	src/diskv/test_test.go	/^func Test5AppendUse(t *testing.T) {$/;"	f
Test5BasicPersistence	src/diskv/test_test.go	/^func Test5BasicPersistence(t *testing.T) {$/;"	f
Test5ConcurrentCrashReliable	src/diskv/test_test.go	/^func Test5ConcurrentCrashReliable(t *testing.T) {$/;"	f
Test5DiskUse	src/diskv/test_test.go	/^func Test5DiskUse(t *testing.T) {$/;"	f
Test5OneLostDisk	src/diskv/test_test.go	/^func Test5OneLostDisk(t *testing.T) {$/;"	f
Test5OneLostOneDown	src/diskv/test_test.go	/^func Test5OneLostOneDown(t *testing.T) {$/;"	f
Test5OneRestart	src/diskv/test_test.go	/^func Test5OneRestart(t *testing.T) {$/;"	f
Test5RejoinMix1	src/diskv/test_test.go	/^func Test5RejoinMix1(t *testing.T) {$/;"	f
Test5RejoinMix3	src/diskv/test_test.go	/^func Test5RejoinMix3(t *testing.T) {$/;"	f
Test5Simultaneous	src/diskv/test_test.go	/^func Test5Simultaneous(t *testing.T) {$/;"	f
TestAtMostOnce	src/pbservice/test_test.go	/^func TestAtMostOnce(t *testing.T) {$/;"	f
TestBackup	src/raft/test_test.go	/^func TestBackup(t *testing.T) {$/;"	f
TestBackupFail	src/lockservice/test_test.go	/^func TestBackupFail(t *testing.T) {$/;"	f
TestBasic	src/kvpaxos/test_test.go	/^func TestBasic(t *testing.T) {$/;"	f
TestBasic	src/kvraft/test_test.go	/^func TestBasic(t *testing.T) {$/;"	f
TestBasic	src/labrpc/test_test.go	/^func TestBasic(t *testing.T) {$/;"	f
TestBasic	src/lockservice/test_test.go	/^func TestBasic(t *testing.T) {$/;"	f
TestBasic	src/mapreduce/test_test.go	/^func TestBasic(t *testing.T) {$/;"	f
TestBasic	src/paxos-shardkv/test_test.go	/^func TestBasic(t *testing.T) {$/;"	f
TestBasic	src/paxos-shardmaster/test_test.go	/^func TestBasic(t *testing.T) {$/;"	f
TestBasic	src/paxos/test_test.go	/^func TestBasic(t *testing.T) {$/;"	f
TestBasic	src/shardmaster/test_test.go	/^func TestBasic(t *testing.T) {$/;"	f
TestBasicAgree	src/raft/test_test.go	/^func TestBasicAgree(t *testing.T) {$/;"	f
TestBasicFail	src/pbservice/test_test.go	/^func TestBasicFail(t *testing.T) {$/;"	f
TestBenchmark	src/labrpc/test_test.go	/^func TestBenchmark(t *testing.T) {$/;"	f
TestChallenge1Concurrent	src/shardkv/test_test.go	/^func TestChallenge1Concurrent(t *testing.T) {$/;"	f
TestChallenge1Delete	src/shardkv/test_test.go	/^func TestChallenge1Delete(t *testing.T) {$/;"	f
TestChallenge2Partial	src/shardkv/test_test.go	/^func TestChallenge2Partial(t *testing.T) {$/;"	f
TestChallenge2Unaffected	src/shardkv/test_test.go	/^func TestChallenge2Unaffected(t *testing.T) {$/;"	f
TestConcurrent	src/kvraft/test_test.go	/^func TestConcurrent(t *testing.T) {$/;"	f
TestConcurrent	src/paxos-shardkv/test_test.go	/^func TestConcurrent(t *testing.T) {$/;"	f
TestConcurrent1	src/shardkv/test_test.go	/^func TestConcurrent1(t *testing.T) {$/;"	f
TestConcurrent2	src/shardkv/test_test.go	/^func TestConcurrent2(t *testing.T) {$/;"	f
TestConcurrentCounts	src/lockservice/test_test.go	/^func TestConcurrentCounts(t *testing.T) {$/;"	f
TestConcurrentMany	src/labrpc/test_test.go	/^func TestConcurrentMany(t *testing.T) {$/;"	f
TestConcurrentOne	src/labrpc/test_test.go	/^func TestConcurrentOne(t *testing.T) {$/;"	f
TestConcurrentSame	src/pbservice/test_test.go	/^func TestConcurrentSame(t *testing.T) {$/;"	f
TestConcurrentSameAppend	src/pbservice/test_test.go	/^func TestConcurrentSameAppend(t *testing.T) {$/;"	f
TestConcurrentSameUnreliable	src/pbservice/test_test.go	/^func TestConcurrentSameUnreliable(t *testing.T) {$/;"	f
TestConcurrentStarts	src/raft/test_test.go	/^func TestConcurrentStarts(t *testing.T) {$/;"	f
TestConcurrentUnreliable	src/paxos-shardkv/test_test.go	/^func TestConcurrentUnreliable(t *testing.T) {$/;"	f
TestCount	src/raft/test_test.go	/^func TestCount(t *testing.T) {$/;"	f
TestCounts	src/labrpc/test_test.go	/^func TestCounts(t *testing.T) {$/;"	f
TestDeaf	src/paxos/test_test.go	/^func TestDeaf(t *testing.T) {$/;"	f
TestDisconnect	src/labrpc/test_test.go	/^func TestDisconnect(t *testing.T) {$/;"	f
TestDone	src/kvpaxos/test_test.go	/^func TestDone(t *testing.T) {$/;"	f
TestDoneMax	src/paxos/test_test.go	/^func TestDoneMax(t *testing.T) {$/;"	f
TestFailAgree	src/raft/test_test.go	/^func TestFailAgree(t *testing.T) {$/;"	f
TestFailNoAgree	src/raft/test_test.go	/^func TestFailNoAgree(t *testing.T) {$/;"	f
TestFailPut	src/pbservice/test_test.go	/^func TestFailPut(t *testing.T) {$/;"	f
TestFigure8	src/raft/test_test.go	/^func TestFigure8(t *testing.T) {$/;"	f
TestFigure8Unreliable	src/raft/test_test.go	/^func TestFigure8Unreliable(t *testing.T) {$/;"	f
TestForget	src/paxos/test_test.go	/^func TestForget(t *testing.T) {$/;"	f
TestForgetMem	src/paxos/test_test.go	/^func TestForgetMem(t *testing.T) {$/;"	f
TestFreshQuery	src/paxos-shardmaster/test_test.go	/^func TestFreshQuery(t *testing.T) {$/;"	f
TestHole	src/kvpaxos/test_test.go	/^func TestHole(t *testing.T) {$/;"	f
TestInitialElection	src/raft/test_test.go	/^func TestInitialElection(t *testing.T) {$/;"	f
TestJoinLeave	src/shardkv/test_test.go	/^func TestJoinLeave(t *testing.T) {$/;"	f
TestKilled	src/labrpc/test_test.go	/^func TestKilled(t *testing.T) {$/;"	f
TestLimp	src/paxos-shardkv/test_test.go	/^func TestLimp(t *testing.T) {$/;"	f
TestLots	src/paxos/test_test.go	/^func TestLots(t *testing.T) {$/;"	f
TestMany	src/lockservice/test_test.go	/^func TestMany(t *testing.T) {$/;"	f
TestMany	src/paxos/test_test.go	/^func TestMany(t *testing.T) {$/;"	f
TestManyFailures	src/mapreduce/test_test.go	/^func TestManyFailures(t *testing.T) {$/;"	f
TestManyForget	src/paxos/test_test.go	/^func TestManyForget(t *testing.T) {$/;"	f
TestManyPartition	src/kvpaxos/test_test.go	/^func TestManyPartition(t *testing.T) {$/;"	f
TestManyPartitionsManyClients	src/kvraft/test_test.go	/^func TestManyPartitionsManyClients(t *testing.T) {$/;"	f
TestManyPartitionsOneClient	src/kvraft/test_test.go	/^func TestManyPartitionsOneClient(t *testing.T) {$/;"	f
TestManyUnreliable	src/paxos/test_test.go	/^func TestManyUnreliable(t *testing.T) {$/;"	f
TestMissChange	src/shardkv/test_test.go	/^func TestMissChange(t *testing.T) {$/;"	f
TestMove	src/paxos-shardkv/test_test.go	/^func TestMove(t *testing.T) {$/;"	f
TestMulti	src/shardmaster/test_test.go	/^func TestMulti(t *testing.T) {$/;"	f
TestOld	src/paxos/test_test.go	/^func TestOld(t *testing.T) {$/;"	f
TestOneFailure	src/mapreduce/test_test.go	/^func TestOneFailure(t *testing.T) {$/;"	f
TestOnePartition	src/kvraft/test_test.go	/^func TestOnePartition(t *testing.T) {$/;"	f
TestPartition	src/kvpaxos/test_test.go	/^func TestPartition(t *testing.T) {$/;"	f
TestPartition	src/paxos/test_test.go	/^func TestPartition(t *testing.T) {$/;"	f
TestPartition1	src/pbservice/test_test.go	/^func TestPartition1(t *testing.T) {$/;"	f
TestPartition2	src/pbservice/test_test.go	/^func TestPartition2(t *testing.T) {$/;"	f
TestPersist1	src/raft/test_test.go	/^func TestPersist1(t *testing.T) {$/;"	f
TestPersist2	src/raft/test_test.go	/^func TestPersist2(t *testing.T) {$/;"	f
TestPersist3	src/raft/test_test.go	/^func TestPersist3(t *testing.T) {$/;"	f
TestPersistConcurrent	src/kvraft/test_test.go	/^func TestPersistConcurrent(t *testing.T) {$/;"	f
TestPersistConcurrentUnreliable	src/kvraft/test_test.go	/^func TestPersistConcurrentUnreliable(t *testing.T) {$/;"	f
TestPersistOneClient	src/kvraft/test_test.go	/^func TestPersistOneClient(t *testing.T) {$/;"	f
TestPersistPartition	src/kvraft/test_test.go	/^func TestPersistPartition(t *testing.T) {$/;"	f
TestPersistPartitionUnreliable	src/kvraft/test_test.go	/^func TestPersistPartitionUnreliable(t *testing.T) {$/;"	f
TestPrimaryFail1	src/lockservice/test_test.go	/^func TestPrimaryFail1(t *testing.T) {$/;"	f
TestPrimaryFail2	src/lockservice/test_test.go	/^func TestPrimaryFail2(t *testing.T) {$/;"	f
TestPrimaryFail3	src/lockservice/test_test.go	/^func TestPrimaryFail3(t *testing.T) {$/;"	f
TestPrimaryFail4	src/lockservice/test_test.go	/^func TestPrimaryFail4(t *testing.T) {$/;"	f
TestPrimaryFail5	src/lockservice/test_test.go	/^func TestPrimaryFail5(t *testing.T) {$/;"	f
TestPrimaryFail6	src/lockservice/test_test.go	/^func TestPrimaryFail6(t *testing.T) {$/;"	f
TestPrimaryFail7	src/lockservice/test_test.go	/^func TestPrimaryFail7(t *testing.T) {$/;"	f
TestPrimaryFail8	src/lockservice/test_test.go	/^func TestPrimaryFail8(t *testing.T) {$/;"	f
TestRPCCount	src/paxos/test_test.go	/^func TestRPCCount(t *testing.T) {$/;"	f
TestReElection	src/raft/test_test.go	/^func TestReElection(t *testing.T) {$/;"	f
TestRegression1	src/labrpc/test_test.go	/^func TestRegression1(t *testing.T) {$/;"	f
TestRejoin	src/raft/test_test.go	/^func TestRejoin(t *testing.T) {$/;"	f
TestReliableChurn	src/raft/test_test.go	/^func TestReliableChurn(t *testing.T) {$/;"	f
TestRepeatedCrash	src/pbservice/test_test.go	/^func TestRepeatedCrash(t *testing.T) {$/;"	f
TestRepeatedCrashUnreliable	src/pbservice/test_test.go	/^func TestRepeatedCrashUnreliable(t *testing.T) {$/;"	f
TestSequentialMany	src/mapreduce/test_test.go	/^func TestSequentialMany(t *testing.T) {$/;"	f
TestSequentialSingle	src/mapreduce/test_test.go	/^func TestSequentialSingle(t *testing.T) {$/;"	f
TestSnapshot	src/shardkv/test_test.go	/^func TestSnapshot(t *testing.T) {$/;"	f
TestSnapshotRPC	src/kvraft/test_test.go	/^func TestSnapshotRPC(t *testing.T) {$/;"	f
TestSnapshotRecover	src/kvraft/test_test.go	/^func TestSnapshotRecover(t *testing.T) {$/;"	f
TestSnapshotRecoverManyClients	src/kvraft/test_test.go	/^func TestSnapshotRecoverManyClients(t *testing.T) {$/;"	f
TestSnapshotUnreliable	src/kvraft/test_test.go	/^func TestSnapshotUnreliable(t *testing.T) {$/;"	f
TestSnapshotUnreliableRecover	src/kvraft/test_test.go	/^func TestSnapshotUnreliableRecover(t *testing.T) {$/;"	f
TestSnapshotUnreliableRecoverConcurrentPartition	src/kvraft/test_test.go	/^func TestSnapshotUnreliableRecoverConcurrentPartition(t *testing.T) {$/;"	f
TestStaticShards	src/shardkv/test_test.go	/^func TestStaticShards(t *testing.T) {$/;"	f
TestTypes	src/labrpc/test_test.go	/^func TestTypes(t *testing.T) {$/;"	f
TestUnreliable	src/kvpaxos/test_test.go	/^func TestUnreliable(t *testing.T) {$/;"	f
TestUnreliable	src/kvraft/test_test.go	/^func TestUnreliable(t *testing.T) {$/;"	f
TestUnreliable	src/labrpc/test_test.go	/^func TestUnreliable(t *testing.T) {$/;"	f
TestUnreliable	src/paxos-shardmaster/test_test.go	/^func TestUnreliable(t *testing.T) {$/;"	f
TestUnreliable1	src/shardkv/test_test.go	/^func TestUnreliable1(t *testing.T) {$/;"	f
TestUnreliable2	src/shardkv/test_test.go	/^func TestUnreliable2(t *testing.T) {$/;"	f
TestUnreliableAgree	src/raft/test_test.go	/^func TestUnreliableAgree(t *testing.T) {$/;"	f
TestUnreliableChurn	src/raft/test_test.go	/^func TestUnreliableChurn(t *testing.T) {$/;"	f
TestUnreliableOneKey	src/kvraft/test_test.go	/^func TestUnreliableOneKey(t *testing.T) {$/;"	f
Unlock	src/lockservice/client.go	/^func (ck *Clerk) Unlock(lockname string) bool {$/;"	f
Unlock	src/lockservice/server.go	/^func (ls *LockServer) Unlock(args *UnlockArgs, reply *UnlockReply) error {$/;"	f
UnlockArgs	src/lockservice/common.go	/^type UnlockArgs struct {$/;"	t
UnlockReply	src/lockservice/common.go	/^type UnlockReply struct {$/;"	t
View	src/viewservice/common.go	/^type View struct {$/;"	t
ViewServer	src/viewservice/server.go	/^type ViewServer struct {$/;"	t
Wait	src/mapreduce/master.go	/^func (mr *Master) Wait() {$/;"	f
Worker	src/mapreduce/worker.go	/^type Worker struct {$/;"	t
Write	src/lockservice/server.go	/^func (dc DeafConn) Write(p []byte) (n int, err error) {$/;"	f
call	src/diskv/client.go	/^func call(srv string, rpcname string,$/;"	f
call	src/kvpaxos/client.go	/^func call(srv string, rpcname string,$/;"	f
call	src/lockservice/client.go	/^func call(srv string, rpcname string,$/;"	f
call	src/mapreduce/common_rpc.go	/^func call(srv string, rpcname string,$/;"	f
call	src/paxos-shardkv/client.go	/^func call(srv string, rpcname string,$/;"	f
call	src/paxos-shardmaster/client.go	/^func call(srv string, rpcname string,$/;"	f
call	src/paxos/paxos.go	/^func call(srv string, name string, args interface{}, reply interface{}) bool {$/;"	f
call	src/pbservice/client.go	/^func call(srv string, rpcname string,$/;"	f
call	src/viewservice/client.go	/^func call(srv string, rpcname string,$/;"	f
changeToCandidate	src/raft/raft.go	/^func (rf *Raft) changeToCandidate() {$/;"	f
check	src/kvpaxos/test_test.go	/^func check(t *testing.T, ck *Clerk, key string, value string) {$/;"	f
check	src/kvraft/test_test.go	/^func check(t *testing.T, ck *Clerk, key string, value string) {$/;"	f
check	src/mapreduce/test_test.go	/^func check(t *testing.T, files []string) {$/;"	f
check	src/paxos-shardmaster/test_test.go	/^func check(t *testing.T, groups []int64, ck *Clerk) {$/;"	f
check	src/pbservice/test_test.go	/^func check(ck *Clerk, key string, value string) {$/;"	f
check	src/shardkv/test_test.go	/^func check(t *testing.T, ck *Clerk, key string, value string) {$/;"	f
check	src/shardmaster/test_test.go	/^func check(t *testing.T, groups []int, ck *Clerk) {$/;"	f
check	src/viewservice/test_test.go	/^func check(t *testing.T, ck *Clerk, p string, b string, n uint) {$/;"	f
checkAppends	src/diskv/test_test.go	/^func checkAppends(t *testing.T, v string, counts []int) {$/;"	f
checkAppends	src/kvpaxos/test_test.go	/^func checkAppends(t *testing.T, v string, counts []int) {$/;"	f
checkAppends	src/pbservice/test_test.go	/^func checkAppends(t *testing.T, v string, counts []int) {$/;"	f
checkClntAppends	src/kvraft/test_test.go	/^func checkClntAppends(t *testing.T, clnt int, v string, count int) {$/;"	f
checkConcurrentAppends	src/kvraft/test_test.go	/^func checkConcurrentAppends(t *testing.T, v string, counts []int) {$/;"	f
checkNoLeader	src/raft/config.go	/^func (cfg *config) checkNoLeader() {$/;"	f
checkOneLeader	src/raft/config.go	/^func (cfg *config) checkOneLeader() int {$/;"	f
checkTerms	src/raft/config.go	/^func (cfg *config) checkTerms() int {$/;"	f
checkWorker	src/mapreduce/test_test.go	/^func checkWorker(t *testing.T, l []int) {$/;"	f
check_same_config	src/shardmaster/test_test.go	/^func check_same_config(t *testing.T, c1 Config, c2 Config) {$/;"	f
checklogs	src/shardkv/config.go	/^func (cfg *config) checklogs() {$/;"	f
checkmax	src/paxos/test_test.go	/^func checkmax(t *testing.T, pxa []*Paxos, seq int, max int) {$/;"	f
cleanpp	src/kvpaxos/test_test.go	/^func cleanpp(tag string, n int) {$/;"	f
cleanpp	src/paxos/test_test.go	/^func cleanpp(tag string, n int) {$/;"	f
cleanup	src/diskv/test_test.go	/^func (tc *tCluster) cleanup() {$/;"	f
cleanup	src/kvpaxos/test_test.go	/^func cleanup(kva []*KVPaxos) {$/;"	f
cleanup	src/kvraft/config.go	/^func (cfg *config) cleanup() {$/;"	f
cleanup	src/mapreduce/test_test.go	/^func cleanup(mr *Master) {$/;"	f
cleanup	src/paxos-shardkv/test_test.go	/^func (tc *tCluster) cleanup() {$/;"	f
cleanup	src/paxos-shardmaster/test_test.go	/^func cleanup(sma []*ShardMaster) {$/;"	f
cleanup	src/paxos/test_test.go	/^func cleanup(pxa []*Paxos) {$/;"	f
cleanup	src/raft/config.go	/^func (cfg *config) cleanup() {$/;"	f
cleanup	src/shardkv/config.go	/^func (cfg *config) cleanup() {$/;"	f
cleanup	src/shardmaster/config.go	/^func (cfg *config) cleanup() {$/;"	f
clerk	src/diskv/test_test.go	/^func (tc *tCluster) clerk() *Clerk {$/;"	f
clerk	src/paxos-shardkv/test_test.go	/^func (tc *tCluster) clerk() *Clerk {$/;"	f
config	src/kvraft/config.go	/^type config struct {$/;"	t
config	src/raft/config.go	/^type config struct {$/;"	t
config	src/shardkv/config.go	/^type config struct {$/;"	t
config	src/shardmaster/config.go	/^type config struct {$/;"	t
connect	src/kvraft/config.go	/^func (cfg *config) connect(i int, to []int) {$/;"	f
connect	src/raft/config.go	/^func (cfg *config) connect(i int) {$/;"	f
connect	src/shardmaster/config.go	/^func (cfg *config) connect(i int, to []int) {$/;"	f
connectUnlocked	src/kvraft/config.go	/^func (cfg *config) connectUnlocked(i int, to []int) {$/;"	f
connectUnlocked	src/shardmaster/config.go	/^func (cfg *config) connectUnlocked(i int, to []int) {$/;"	f
crash1	src/raft/config.go	/^func (cfg *config) crash1(i int) {$/;"	f
debug	src/mapreduce/common.go	/^func debug(format string, a ...interface{}) (n int, err error) {$/;"	f
debugEnabled	src/mapreduce/common.go	/^const debugEnabled = false$/;"	c
decodeKey	src/diskv/server.go	/^func (kv *DisKV) decodeKey(filename string) (string, error) {$/;"	f
deleteClient	src/kvraft/config.go	/^func (cfg *config) deleteClient(ck *Clerk) {$/;"	f
deleteClient	src/shardkv/config.go	/^func (cfg *config) deleteClient(ck *Clerk) {$/;"	f
deleteClient	src/shardmaster/config.go	/^func (cfg *config) deleteClient(ck *Clerk) {$/;"	f
disconnect	src/kvraft/config.go	/^func (cfg *config) disconnect(i int, from []int) {$/;"	f
disconnect	src/raft/config.go	/^func (cfg *config) disconnect(i int) {$/;"	f
disconnect	src/shardmaster/config.go	/^func (cfg *config) disconnect(i int, from []int) {$/;"	f
disconnectUnlocked	src/kvraft/config.go	/^func (cfg *config) disconnectUnlocked(i int, from []int) {$/;"	f
disconnectUnlocked	src/shardmaster/config.go	/^func (cfg *config) disconnectUnlocked(i int, from []int) {$/;"	f
diskv	src/diskv/client.go	/^package diskv$/;"	p
diskv	src/diskv/common.go	/^package diskv$/;"	p
diskv	src/diskv/server.go	/^package diskv$/;"	p
diskv	src/diskv/test_test.go	/^package diskv$/;"	p
dispatch	src/labrpc/labrpc.go	/^func (rs *Server) dispatch(req reqMsg) replyMsg {$/;"	f
dispatch	src/labrpc/labrpc.go	/^func (svc *Service) dispatch(methname string, req reqMsg) replyMsg {$/;"	f
doConcurrent	src/diskv/test_test.go	/^func doConcurrent(t *testing.T, unreliable bool) {$/;"	f
doConcurrent	src/paxos-shardkv/test_test.go	/^func doConcurrent(t *testing.T, unreliable bool) {$/;"	f
doConcurrentCrash	src/diskv/test_test.go	/^func doConcurrentCrash(t *testing.T, unreliable bool) {$/;"	f
doMap	src/mapreduce/common_map.go	/^func doMap($/;"	f
doReduce	src/mapreduce/common_reduce.go	/^func doReduce($/;"	f
electionTimeout	src/kvraft/test_test.go	/^const electionTimeout = 1 * time.Second$/;"	c
encodeKey	src/diskv/server.go	/^func (kv *DisKV) encodeKey(key string) string {$/;"	f
fileGet	src/diskv/server.go	/^func (kv *DisKV) fileGet(shard int, key string) (string, error) {$/;"	f
filePut	src/diskv/server.go	/^func (kv *DisKV) filePut(shard int, key string, content string) error {$/;"	f
fileReadShard	src/diskv/server.go	/^func (kv *DisKV) fileReadShard(shard int) map[string]string {$/;"	f
fileReplaceShard	src/diskv/server.go	/^func (kv *DisKV) fileReplaceShard(shard int, m map[string]string) {$/;"	f
group	src/shardkv/config.go	/^type group struct {$/;"	t
hearbeat	raft.go	/^func (rf *Raft)hearbeat() {$/;"	f
heartbeat	src/raft/raft.go	/^func (rf *Raft) heartbeat() {$/;"	f
ihash	src/mapreduce/common_map.go	/^func ihash(s string) uint32 {$/;"	f
internalChurn	src/raft/test_test.go	/^func internalChurn(t *testing.T, unreliable bool) {$/;"	f
isdead	src/diskv/server.go	/^func (kv *DisKV) isdead() bool {$/;"	f
isdead	src/kvpaxos/server.go	/^func (kv *KVPaxos) isdead() bool {$/;"	f
isdead	src/paxos-shardkv/server.go	/^func (kv *ShardKV) isdead() bool {$/;"	f
isdead	src/paxos-shardmaster/server.go	/^func (sm *ShardMaster) isdead() bool {$/;"	f
isdead	src/paxos/paxos.go	/^func (px *Paxos) isdead() bool {$/;"	f
isdead	src/pbservice/server.go	/^func (pb *PBServer) isdead() bool {$/;"	f
isdead	src/viewservice/server.go	/^func (vs *ViewServer) isdead() bool {$/;"	f
isunreliable	src/diskv/server.go	/^func (kv *DisKV) isunreliable() bool {$/;"	f
isunreliable	src/kvpaxos/server.go	/^func (kv *KVPaxos) isunreliable() bool {$/;"	f
isunreliable	src/paxos-shardkv/server.go	/^func (kv *ShardKV) isunreliable() bool {$/;"	f
isunreliable	src/paxos-shardmaster/server.go	/^func (sm *ShardMaster) isunreliable() bool {$/;"	f
isunreliable	src/paxos/paxos.go	/^func (px *Paxos) isunreliable() bool {$/;"	f
isunreliable	src/pbservice/server.go	/^func (pb *PBServer) isunreliable() bool {$/;"	f
jobPhase	src/mapreduce/common.go	/^type jobPhase string$/;"	t
join	src/diskv/test_test.go	/^func (tc *tCluster) join(gi int) {$/;"	f
join	src/paxos-shardkv/test_test.go	/^func (tc *tCluster) join(gi int) {$/;"	f
join	src/shardkv/config.go	/^func (cfg *config) join(gi int) {$/;"	f
joinm	src/shardkv/config.go	/^func (cfg *config) joinm(gis []int) {$/;"	f
key2shard	src/diskv/client.go	/^func key2shard(key string) int {$/;"	f
key2shard	src/paxos-shardkv/client.go	/^func key2shard(key string) int {$/;"	f
key2shard	src/shardkv/client.go	/^func key2shard(key string) int {$/;"	f
kill	src/diskv/server.go	/^func (kv *DisKV) kill() {$/;"	f
kill	src/kvpaxos/server.go	/^func (kv *KVPaxos) kill() {$/;"	f
kill	src/lockservice/server.go	/^func (ls *LockServer) kill() {$/;"	f
kill	src/paxos-shardkv/server.go	/^func (kv *ShardKV) kill() {$/;"	f
kill	src/pbservice/server.go	/^func (pb *PBServer) kill() {$/;"	f
kill1	src/diskv/test_test.go	/^func (tc *tCluster) kill1(gi int, si int, deletefiles bool) {$/;"	f
kvpaxos	src/kvpaxos/client.go	/^package kvpaxos$/;"	p
kvpaxos	src/kvpaxos/common.go	/^package kvpaxos$/;"	p
kvpaxos	src/kvpaxos/server.go	/^package kvpaxos$/;"	p
kvpaxos	src/kvpaxos/test_test.go	/^package kvpaxos$/;"	p
labrpc	src/labrpc/labrpc.go	/^package labrpc$/;"	p
labrpc	src/labrpc/test_test.go	/^package labrpc$/;"	p
leave	src/diskv/test_test.go	/^func (tc *tCluster) leave(gi int) {$/;"	f
leave	src/paxos-shardkv/test_test.go	/^func (tc *tCluster) leave(gi int) {$/;"	f
leave	src/shardkv/config.go	/^func (cfg *config) leave(gi int) {$/;"	f
leavem	src/shardkv/config.go	/^func (cfg *config) leavem(gis []int) {$/;"	f
lockservice	src/lockservice/client.go	/^package lockservice$/;"	p
lockservice	src/lockservice/common.go	/^package lockservice$/;"	p
lockservice	src/lockservice/server.go	/^package lockservice$/;"	p
lockservice	src/lockservice/test_test.go	/^package lockservice$/;"	p
main	src/main/diskvd.go	/^func main() {$/;"	f
main	src/main/diskvd.go	/^package main$/;"	p
main	src/main/ii.go	/^func main() {$/;"	f
main	src/main/ii.go	/^package main$/;"	p
main	src/main/lockc.go	/^func main() {$/;"	f
main	src/main/lockc.go	/^package main$/;"	p
main	src/main/lockd.go	/^func main() {$/;"	f
main	src/main/lockd.go	/^package main$/;"	p
main	src/main/pbc.go	/^func main() {$/;"	f
main	src/main/pbc.go	/^package main$/;"	p
main	src/main/pbd.go	/^func main() {$/;"	f
main	src/main/pbd.go	/^package main$/;"	p
main	src/main/viewd.go	/^func main() {$/;"	f
main	src/main/viewd.go	/^package main$/;"	p
main	src/main/wc.go	/^func main() {$/;"	f
main	src/main/wc.go	/^package main$/;"	p
makeClient	src/kvraft/config.go	/^func (cfg *config) makeClient(to []int) *Clerk {$/;"	f
makeClient	src/shardkv/config.go	/^func (cfg *config) makeClient() *Clerk {$/;"	f
makeClient	src/shardmaster/config.go	/^func (cfg *config) makeClient(to []int) *Clerk {$/;"	f
makeInputs	src/mapreduce/test_test.go	/^func makeInputs(num int) []string {$/;"	f
make_config	src/kvraft/config.go	/^func make_config(t *testing.T, tag string, n int, unreliable bool, maxraftstate int) *config {$/;"	f
make_config	src/raft/config.go	/^func make_config(t *testing.T, n int, unreliable bool) *config {$/;"	f
make_config	src/shardkv/config.go	/^func make_config(t *testing.T, n int, unreliable bool, maxraftstate int) *config {$/;"	f
make_config	src/shardmaster/config.go	/^func make_config(t *testing.T, n int, unreliable bool) *config {$/;"	f
make_partition	src/kvraft/config.go	/^func (cfg *config) make_partition() ([]int, []int) {$/;"	f
make_partition	src/shardmaster/config.go	/^func (cfg *config) make_partition() ([]int, []int) {$/;"	f
mapF	src/main/ii.go	/^func mapF(document string, value string) (res []mapreduce.KeyValue) {$/;"	f
mapF	src/main/wc.go	/^func mapF(document string, value string) (res []mapreduce.KeyValue) {$/;"	f
mapPhase	src/mapreduce/common.go	/^const ($/;"	c
mapreduce	src/mapreduce/common.go	/^package mapreduce$/;"	p
mapreduce	src/mapreduce/common_map.go	/^package mapreduce$/;"	p
mapreduce	src/mapreduce/common_reduce.go	/^package mapreduce$/;"	p
mapreduce	src/mapreduce/common_rpc.go	/^package mapreduce$/;"	p
mapreduce	src/mapreduce/master.go	/^package mapreduce$/;"	p
mapreduce	src/mapreduce/master_rpc.go	/^package mapreduce$/;"	p
mapreduce	src/mapreduce/master_splitmerge.go	/^package mapreduce$/;"	p
mapreduce	src/mapreduce/readme.go	/^package mapreduce$/;"	p
mapreduce	src/mapreduce/schedule.go	/^package mapreduce$/;"	p
mapreduce	src/mapreduce/test_test.go	/^package mapreduce$/;"	p
mapreduce	src/mapreduce/worker.go	/^package mapreduce$/;"	p
mastername	src/shardkv/config.go	/^func (cfg *config) mastername(i int) string {$/;"	f
merge	src/mapreduce/master_splitmerge.go	/^func (mr *Master) merge() {$/;"	f
mergeName	src/mapreduce/common.go	/^func mergeName(jobName string, reduceTask int) string {$/;"	f
nCommitted	src/raft/config.go	/^func (cfg *config) nCommitted(index int) (int, interface{}) {$/;"	f
nMap	src/mapreduce/test_test.go	/^	nNumber = 100000$/;"	c
nNumber	src/mapreduce/test_test.go	/^const ($/;"	c
nReduce	src/mapreduce/test_test.go	/^	nMap    = 100$/;"	c
ndecided	src/paxos/test_test.go	/^func ndecided(t *testing.T, pxa []*Paxos, seq int) int {$/;"	f
newMaster	src/mapreduce/master.go	/^func newMaster(master string) (mr *Master) {$/;"	f
newport	src/diskv/test_test.go	/^func (tc *tCluster) newport() string {$/;"	f
noTestSpeed	src/paxos/test_test.go	/^func noTestSpeed(t *testing.T) {$/;"	f
nrand	src/diskv/client.go	/^func nrand() int64 {$/;"	f
nrand	src/kvpaxos/client.go	/^func nrand() int64 {$/;"	f
nrand	src/kvraft/client.go	/^func nrand() int64 {$/;"	f
nrand	src/paxos-shardkv/client.go	/^func nrand() int64 {$/;"	f
nrand	src/pbservice/client.go	/^func nrand() int64 {$/;"	f
nrand	src/shardkv/client.go	/^func nrand() int64 {$/;"	f
nrand	src/shardmaster/client.go	/^func nrand() int64 {$/;"	f
one	src/raft/config.go	/^func (cfg *config) one(cmd int, expectedServers int) int {$/;"	f
part	src/kvpaxos/test_test.go	/^func part(t *testing.T, tag string, npaxos int, p1 []int, p2 []int, p3 []int) {$/;"	f
part	src/paxos/test_test.go	/^func part(t *testing.T, tag string, npaxos int, p1 []int, p2 []int, p3 []int) {$/;"	f
partition	src/kvraft/config.go	/^func (cfg *config) partition(p1 []int, p2 []int) {$/;"	f
partition	src/shardmaster/config.go	/^func (cfg *config) partition(p1 []int, p2 []int) {$/;"	f
partitioner	src/kvraft/test_test.go	/^func partitioner(t *testing.T, cfg *config, ch chan bool, done *int32) {$/;"	f
paxos	src/paxos/paxos.go	/^package paxos$/;"	p
paxos	src/paxos/test_test.go	/^package paxos$/;"	p
pbservice	src/pbservice/client.go	/^package pbservice$/;"	p
pbservice	src/pbservice/common.go	/^package pbservice$/;"	p
pbservice	src/pbservice/server.go	/^package pbservice$/;"	p
pbservice	src/pbservice/test_test.go	/^package pbservice$/;"	p
persist	raft.go	/^func (rf *Raft) persist() {$/;"	f
persist	src/raft/raft.go	/^func (rf *Raft) persist() {$/;"	f
port	src/kvpaxos/test_test.go	/^func port(tag string, host int) string {$/;"	f
port	src/lockservice/test_test.go	/^func port(suffix string) string {$/;"	f
port	src/mapreduce/test_test.go	/^func port(suffix string) string {$/;"	f
port	src/paxos-shardkv/test_test.go	/^func port(tag string, host int) string {$/;"	f
port	src/paxos-shardmaster/test_test.go	/^func port(tag string, host int) string {$/;"	f
port	src/paxos/test_test.go	/^func port(tag string, host int) string {$/;"	f
port	src/pbservice/test_test.go	/^func port(tag string, host int) string {$/;"	f
port	src/viewservice/test_test.go	/^func port(suffix string) string {$/;"	f
pp	src/kvpaxos/test_test.go	/^func pp(tag string, src int, dst int) string {$/;"	f
pp	src/paxos/test_test.go	/^func pp(tag string, src int, dst int) string {$/;"	f
proxy	src/pbservice/test_test.go	/^func proxy(t *testing.T, port string, delay *int32) {$/;"	f
raft	raft.go	/^package raft$/;"	p
raft	src/raft/config.go	/^package raft$/;"	p
raft	src/raft/persister.go	/^package raft$/;"	p
raft	src/raft/raft.go	/^package raft$/;"	p
raft	src/raft/test_test.go	/^package raft$/;"	p
raft	src/raft/util.go	/^package raft$/;"	p
raftkv	src/kvraft/client.go	/^package raftkv$/;"	p
raftkv	src/kvraft/common.go	/^package raftkv$/;"	p
raftkv	src/kvraft/config.go	/^package raftkv$/;"	p
raftkv	src/kvraft/server.go	/^package raftkv$/;"	p
raftkv	src/kvraft/test_test.go	/^package raftkv$/;"	p
randclerk	src/kvpaxos/test_test.go	/^func randclerk(kvh []string) *Clerk {$/;"	f
random_handles	src/kvraft/config.go	/^func random_handles(kvh []*labrpc.ClientEnd) []*labrpc.ClientEnd {$/;"	f
random_handles	src/shardkv/config.go	/^func random_handles(kvh []*labrpc.ClientEnd) []*labrpc.ClientEnd {$/;"	f
random_handles	src/shardmaster/config.go	/^func random_handles(kvh []*labrpc.ClientEnd) []*labrpc.ClientEnd {$/;"	f
randstring	src/diskv/test_test.go	/^func randstring(n int) string {$/;"	f
randstring	src/kvraft/config.go	/^func randstring(n int) string {$/;"	f
randstring	src/paxos/test_test.go	/^func randstring(n int) string {$/;"	f
randstring	src/raft/config.go	/^func randstring(n int) string {$/;"	f
randstring	src/shardkv/config.go	/^func randstring(n int) string {$/;"	f
randstring	src/shardmaster/config.go	/^func randstring(n int) string {$/;"	f
readPersist	raft.go	/^func (rf *Raft) readPersist(data []byte) {$/;"	f
readPersist	src/raft/raft.go	/^func (rf *Raft) readPersist(data []byte) {$/;"	f
reduceF	src/main/ii.go	/^func reduceF(key string, values []string) string {$/;"	f
reduceF	src/main/wc.go	/^func reduceF(key string, values []string) string {$/;"	f
reduceName	src/mapreduce/common.go	/^func reduceName(jobName string, mapTask int, reduceTask int) string {$/;"	f
reducePhase	src/mapreduce/common.go	/^	mapPhase    jobPhase = "Map"$/;"	c
reduce_same_file	src/main/ii.go	/^func reduce_same_file(values []string) []string {$/;"	f
register	src/mapreduce/worker.go	/^func (wk *Worker) register(master string) {$/;"	f
removeFile	src/mapreduce/master_splitmerge.go	/^func removeFile(n string) {$/;"	f
replyMsg	src/labrpc/labrpc.go	/^type replyMsg struct {$/;"	t
reqMsg	src/labrpc/labrpc.go	/^type reqMsg struct {$/;"	t
requestVote	raft.go	/^func (rf *Raft) requestVote(args RequestVoteArgs, reply *RequestVoteReply) {$/;"	f
rpcCount	src/raft/config.go	/^func (cfg *config) rpcCount(server int) int {$/;"	f
run	src/mapreduce/master.go	/^func (mr *Master) run(jobName string, files []string, nreduce int,$/;"	f
run_client	src/kvraft/test_test.go	/^func run_client(t *testing.T, cfg *config, me int, ca chan bool, fn func(me int, ck *Clerk, t *testing.T)) {$/;"	f
schedule	src/mapreduce/schedule.go	/^func (mr *Master) schedule(phase jobPhase) {$/;"	f
sendAppendEntries	src/raft/raft.go	/^func (rf *Raft) sendAppendEntries(server int, args AppendEntriesArgs, reply *RequestVoteReply) bool {$/;"	f
sendRequestVote	raft.go	/^func (rf *Raft) sendRequestVote(server int, args RequestVoteArgs, reply *RequestVoteReply) bool {$/;"	f
sendRequestVote	src/raft/raft.go	/^func (rf *Raft) sendRequestVote(server int, args RequestVoteArgs, reply *RequestVoteReply) bool {$/;"	f
servername	src/shardkv/config.go	/^func (cfg *config) servername(gid int, i int) string {$/;"	f
setlongreordering	src/raft/config.go	/^func (cfg *config) setlongreordering(longrel bool) {$/;"	f
setunreliable	src/kvpaxos/server.go	/^func (kv *KVPaxos) setunreliable(what bool) {$/;"	f
setunreliable	src/paxos-shardmaster/server.go	/^func (sm *ShardMaster) setunreliable(what bool) {$/;"	f
setunreliable	src/paxos/paxos.go	/^func (px *Paxos) setunreliable(what bool) {$/;"	f
setunreliable	src/pbservice/server.go	/^func (pb *PBServer) setunreliable(what bool) {$/;"	f
setunreliable	src/raft/config.go	/^func (cfg *config) setunreliable(unrel bool) {$/;"	f
setup	src/diskv/test_test.go	/^func setup(t *testing.T, tag string, ngroups int, nreplicas int, unreliable bool) *tCluster {$/;"	f
setup	src/mapreduce/test_test.go	/^func setup() *Master {$/;"	f
setup	src/paxos-shardkv/test_test.go	/^func setup(t *testing.T, tag string, unreliable bool) *tCluster {$/;"	f
shardDir	src/diskv/server.go	/^func (kv *DisKV) shardDir(shard int) string {$/;"	f
shardclerk	src/diskv/test_test.go	/^func (tc *tCluster) shardclerk() *shardmaster.Clerk {$/;"	f
shardclerk	src/paxos-shardkv/test_test.go	/^func (tc *tCluster) shardclerk() *shardmaster.Clerk {$/;"	f
shardclerk	src/shardkv/config.go	/^func (cfg *config) shardclerk() *shardmaster.Clerk {$/;"	f
shardkv	src/paxos-shardkv/client.go	/^package shardkv$/;"	p
shardkv	src/paxos-shardkv/common.go	/^package shardkv$/;"	p
shardkv	src/paxos-shardkv/server.go	/^package shardkv$/;"	p
shardkv	src/paxos-shardkv/test_test.go	/^package shardkv$/;"	p
shardkv	src/shardkv/client.go	/^package shardkv$/;"	p
shardkv	src/shardkv/common.go	/^package shardkv$/;"	p
shardkv	src/shardkv/config.go	/^package shardkv$/;"	p
shardkv	src/shardkv/server.go	/^package shardkv$/;"	p
shardkv	src/shardkv/test_test.go	/^package shardkv$/;"	p
shardmaster	src/paxos-shardmaster/client.go	/^package shardmaster$/;"	p
shardmaster	src/paxos-shardmaster/common.go	/^package shardmaster$/;"	p
shardmaster	src/paxos-shardmaster/server.go	/^package shardmaster$/;"	p
shardmaster	src/paxos-shardmaster/test_test.go	/^package shardmaster$/;"	p
shardmaster	src/shardmaster/client.go	/^package shardmaster$/;"	p
shardmaster	src/shardmaster/common.go	/^package shardmaster$/;"	p
shardmaster	src/shardmaster/config.go	/^package shardmaster$/;"	p
shardmaster	src/shardmaster/server.go	/^package shardmaster$/;"	p
shardmaster	src/shardmaster/test_test.go	/^package shardmaster$/;"	p
space	src/diskv/test_test.go	/^func (tc *tCluster) space() int64 {$/;"	f
spawn_clients_and_wait	src/kvraft/test_test.go	/^func spawn_clients_and_wait(t *testing.T, cfg *config, ncli int, fn func(me int, ck *Clerk, t *testing.T)) {$/;"	f
start1	src/diskv/test_test.go	/^func (tc *tCluster) start1(gi int, si int) {$/;"	f
start1	src/paxos-shardkv/test_test.go	/^func (tc *tCluster) start1(gi int, si int, unreliable bool) {$/;"	f
start1	src/raft/config.go	/^func (cfg *config) start1(i int) {$/;"	f
startRPCServer	src/mapreduce/master_rpc.go	/^func (mr *Master) startRPCServer() {$/;"	f
stopRPCServer	src/mapreduce/master_rpc.go	/^func (mr *Master) stopRPCServer() {$/;"	f
tCluster	src/diskv/test_test.go	/^type tCluster struct {$/;"	t
tCluster	src/paxos-shardkv/test_test.go	/^type tCluster struct {$/;"	t
tGroup	src/diskv/test_test.go	/^type tGroup struct {$/;"	t
tGroup	src/paxos-shardkv/test_test.go	/^type tGroup struct {$/;"	t
tServer	src/diskv/test_test.go	/^type tServer struct {$/;"	t
tick	src/diskv/server.go	/^func (kv *DisKV) tick() {$/;"	f
tick	src/paxos-shardkv/server.go	/^func (kv *ShardKV) tick() {$/;"	f
tick	src/pbservice/server.go	/^func (pb *PBServer) tick() {$/;"	f
tick	src/viewservice/server.go	/^func (vs *ViewServer) tick() {$/;"	f
tl	src/lockservice/test_test.go	/^func tl(t *testing.T, ck *Clerk, lockname string, expected bool) {$/;"	f
tu	src/lockservice/test_test.go	/^func tu(t *testing.T, ck *Clerk, lockname string, expected bool) {$/;"	f
usage	src/main/diskvd.go	/^func usage() {$/;"	f
usage	src/main/lockc.go	/^func usage() {$/;"	f
usage	src/main/pbc.go	/^func usage() {$/;"	f
viewservice	src/viewservice/client.go	/^package viewservice$/;"	p
viewservice	src/viewservice/common.go	/^package viewservice$/;"	p
viewservice	src/viewservice/server.go	/^package viewservice$/;"	p
viewservice	src/viewservice/test_test.go	/^package viewservice$/;"	p
wait	src/raft/config.go	/^func (cfg *config) wait(index int, n int, startTerm int) interface{} {$/;"	f
waitmajority	src/paxos/test_test.go	/^func waitmajority(t *testing.T, pxa []*Paxos, seq int) {$/;"	f
waitn	src/paxos/test_test.go	/^func waitn(t *testing.T, pxa []*Paxos, seq int, wanted int) {$/;"	f
